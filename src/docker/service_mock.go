// Code generated by MockGen. DO NOT EDIT.
// Source: src/docker/service.go

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// ImageExists mocks base method.
func (m *MockServiceInterface) ImageExists(image string, ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExists", image, ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ImageExists indicates an expected call of ImageExists.
func (mr *MockServiceInterfaceMockRecorder) ImageExists(image, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExists", reflect.TypeOf((*MockServiceInterface)(nil).ImageExists), image, ctx)
}

// RunContainer mocks base method.
func (m *MockServiceInterface) RunContainer(image string, params []string, ctx context.Context) ([]byte, *Headers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainer", image, params, ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*Headers)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunContainer indicates an expected call of RunContainer.
func (mr *MockServiceInterfaceMockRecorder) RunContainer(image, params, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockServiceInterface)(nil).RunContainer), image, params, ctx)
}

// RunContainerPost mocks base method.
func (m *MockServiceInterface) RunContainerPost(image string, reqBody []string, ctx context.Context) ([]byte, *Headers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainerPost", image, reqBody, ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*Headers)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunContainerPost indicates an expected call of RunContainerPost.
func (mr *MockServiceInterfaceMockRecorder) RunContainerPost(image, reqBody, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainerPost", reflect.TypeOf((*MockServiceInterface)(nil).RunContainerPost), image, reqBody, ctx)
}
